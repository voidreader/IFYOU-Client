using UnityEngine;

namespace Toast.Cef.Webview.Internal
{
    public static class CefCursor
    {
        public static readonly Vector2 hotspot = new Vector2(5, 0);

        private static Color32[] GetArrow()
        {
            var _ = new Color32(0x00, 0x00, 0x00, 0x00);
            var f = new Color32(0xFF, 0xFF, 0xFF, 0xFF);
            var s = new Color32(0x00, 0x00, 0x00, 0xFF);

            return new Color32[]
            {
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, f, f, f, f, s, s, s, s, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, s, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, s, _, s, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, s, _, _, s, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, s, _, _, _, _, s, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, s, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, s, s, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
            };
        }

        private static Color32[] GetHand()
        {
            var _ = new Color32(0x00, 0x00, 0x00, 0x00);
            var f = new Color32(0xFF, 0xFF, 0xFF, 0xFF);
            var s = new Color32(0x00, 0x00, 0x00, 0xFF);
            return new Color32[]                    
            {
                _, _, _, _, _, s, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, s, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, s, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, s, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, s, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, s, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, s, f, f, s, s, s, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, s, f, f, s, f, f, s, s, s, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, s, f, f, s, f, f, s, f, f, s, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                s, s, s, _, s, f, f, s, f, f, s, f, f, s, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                s, f, f, s, s, f, f, s, f, f, s, f, f, s, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                s, f, f, f, s, f, f, f, f, f, f, f, f, s, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, s, f, f, f, f, f, f, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, s, f, f, f, f, f, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, s, f, f, f, f, f, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, s, f, f, f, f, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, s, f, f, f, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, s, f, f, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, s, f, f, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, f, f, f, f, f, f, f, f, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, s, s, s, s, s, s, s, s, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
            };
        }

        private static Color32[] GetIBeam()
        {
            var _ = new Color32(0x00, 0x00, 0x00, 0x00);
            var s = new Color32(0x00, 0x00, 0x00, 0xFF);
            return new Color32[]
            {
                _, _, _, s, s, s, s, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, s, s, s, s, s, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _
            };
        }

        public static Texture2D GetCursorTexture(int cursorType)
        {
            int size = 32;
            Color32[] pixels = null;

            if (cursorType == WebCursorType.HAND)
            {
                pixels = GetHand();
            }
            else if (cursorType == WebCursorType.IBEAM)
            {
                pixels = GetIBeam();
            }
            else
            {
                pixels = GetArrow();
            }

            int pixelIndex1 = 0;
            int pixelIndex2 = 0;
            Color32 pixel = new Color32();

            for (int y = 0; y < size / 2; ++y)
            {
                for (int x = 0; x < size; ++x)
                {
                    pixelIndex1 = y * size + x;
                    pixelIndex2 = (size - y - 1) * size + x;

                    pixel = pixels[pixelIndex1];
                    pixels[pixelIndex1] = pixels[pixelIndex2];
                    pixels[pixelIndex2] = pixel;
                }
            }

#if UNITY_2018_3_OR_NEWER
            TextureFormat format = TextureFormat.RGBA32;
#else
            TextureFormat format = TextureFormat.ARGB32;
#endif
            Texture2D result = new Texture2D(size, size, format, false, false);
            result.SetPixels32(pixels);
            result.Apply(false, false);
#if UNITY_EDITOR
            result.alphaIsTransparency = true;
#endif
            return result;
        }
    }
}